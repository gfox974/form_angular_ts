Will use :
nodejs / npm
package @angular/cli
json
typescript

// angular hints : ng new proj ( dl les compos et genere le projet dans le frame - dans ce projet : routing -> yes (une page, browsing entre components)) / ng serve --open (projets à la django, le compile et l'execute)
--> exemple a faire, tuto : https://angular.io/tutorial -> tour of heroes (ch. 1 -> 4 ).
DONE ->
Summary

You're at the end of your journey, and you've accomplished a lot.

    You added the necessary dependencies to use HTTP in the app.
    You refactored HeroService to load heroes from a web API.
    You extended HeroService to support post(), put(), and delete() methods.
    You updated the components to allow adding, editing, and deleting of heroes.
    You configured an in-memory web API.
    You learned how to use observables.


site : learnxinyminutes ( exos plusieurs langages )

ToH ch 1-6 done,
Exo bonus Day1 : 
 ajouter un component contact et son routing


Exo Day2 - done :
    - mettre en place une nouvelle route (routerlink) "compteur" (et son component)
    val de base 0 (nb de clicks + = ++, - = --)
    [-] onclick -> - +1
    [+] onclick -> + +1

    DONE, locale non persistante (en jouant sur les propriétés d'objet) -> Todo pour le fun si le temps : valeur dans une api en simulant une db / requete a distance + une fonction pour les deux actions selon le dom cliqué

Exo Day2 - Todo list :
    - faire une liste de taches a faire:
        - pouvoir ajouter des taches ( un input de champ de caracteres ? )
        - passer un statut fait / pas fait ( genre rayé si tache accomplie ), bouton supprimer pour la tache
        - Ajout de filtres : afficher les taches a faire / accomplies / toutes

( ng models, classes etc)
DONE, mais encore des pistes a explo pour la liste

Exos Day3 - mini apps à faire :
( new proj miniapps)
    - faire au moins trois de ces exercices :
        - appli minuteur (difficulté **):
            - pouvoir creer des minuteurs (customs avec libellé, start/stop) qui une fois démarrés se décomptent jusqu'a 0 (avec un refresh du visuel) -> alert ou autre DONE.
            (setInterval peut aider)
            - Fournir a l'utilisateur le moyen de creer un minuteur et de definir son temps
        
        - un convertisseur farenheit vers celsius (difficulté *):
            - L'utilisateur doit entrer une valeur en degrés farenheit, on affiche son equivalent en celsius
        
        - IMC (indice de masse corporelle - difficulté *) :
            - on entre sa taille en cm, son poids, l'application calcule et restitue l'indice de masse corporelle ( etat anorexie, maigreur, etc)

        - RPN (reversed polish notation) : créer une calculatrice rpn (difficulté ***)
        exemple : 1 * ( 2 + 3) -> normale,
        polonaise inversée : 1 2 3 (les input sont stack dans un tableau) ( principe FIFO)
                                + (les operateurs sont appliqués selon une sequence)
                              *  
        ( bref, voir techpedia vis à vis du rpn)

        - Chuck norris jokes api (difficulté **): 
            on va faire appel à une api pour fetch des jokes aleatoires (via un service) -> api dispo ici : https://api.chucknorris.io/ 
            ( doc observables)

        - Vote (difficulté **):
            On a une urne, on procede au dépouillement, on doit savoir : quels candidats on a (nom), le nombre de votes total, le nombre de votes pour chacun des candidats, chaque bouton permet de voter pour un candidat, on affiche le % de voix pour chacun en dessous (+ bonus prise en compte du blanc(null))